services:
  # PHP-FPM アプリケーションサービス
  app:
    build:
      context: ./src # Dockerfile が src ディレクトリ内にあることを示す
      dockerfile: ../Dockerfile # Dockerfile のパスを指定 (service ディレクトリからの相対パス)
    volumes:
      - ./src:/var/www/html # ホストの src ディレクトリをコンテナの /var/www/html にマウント
    ports:
      - "9000:9000" # PHP-FPM のポート (Nginxからアクセスされる)
    networks:
      - app-network # アプリケーションネットワークに参加

  # Nginx Webサーバーサービス
  nginx:
    image: nginx:stable-alpine # Nginxの公式イメージを使用
    ports:
      - "80:80" # ホストの 80 番ポートを Nginx の 80 番ポートにマッピング
    volumes:
      - ./src:/var/www/html # Laravel プロジェクトのファイルを Nginx からも参照できるようにマウント
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf # Nginx の設定ファイル
    depends_on:
      - app # app サービスが起動してから Nginx が起動するように依存関係を設定
    networks:
      - app-network # アプリケーションネットワークに参加

  # MySQL データベースサービス
  db:
    image: mysql:8.0 # MySQL 8.0 の公式イメージを使用
    platform: linux/x86_64 # M1 Macなどの場合、互換性のため追加すると良い
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD} # .envファイルから読み込む
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    env_file:
      - .env # プロジェクトルートの.envファイルを読み込む
    volumes:
      - db-data:/var/lib/mysql # データベースのデータを永続化
    ports:
      - "3306:3306" # ホストの 3306 番ポートを MySQL の 3306 番ポートにマッピング
    networks:
      - app-network # アプリケーションネットワークに参加

# ボリューム定義 (データベースのデータを永続化するため)
volumes:
  db-data:

# ネットワーク定義 (サービス間の通信用)
networks:
  app-network:
    driver: bridge